parameters:
  - name: buildNumber
    type: string

steps:
  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Create resource group"
    inputs:
      deploymentScope: "Subscription"
      azureResourceManagerConnection: "$(azureSubscription)"
      location: "$(rgLocation)"
      deploymentMode: "Incremental"
      csmFile: "$(Pipeline.Workspace)/deploy/ResourceGroup/template.json"
      csmParametersFile: "$(Pipeline.Workspace)/deploy/ResourceGroup/template.parameters.json"
      overrideParameters: |
        -rgName "$(rgName)" 
        -rgLocation "$(rgLocation)"

  - task: AzureCLI@2
    displayName: "Upload ARM templates and generate SAS token"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        az storage account create -n "$(tempStorageName)" -g "$(sharedRgName)" -l "$(sharedRgLocation)" 
        az storage container create -n "$(tempContainerName)" --account-name "$(tempStorageName)" --auth-mode login 
        $accountKey = (az storage account keys list -g "$(sharedRgName)" -n "$(tempStorageName)" | ConvertFrom-Json)[0].value
        az storage blob upload-batch --source "$(Pipeline.Workspace)/deploy/" --pattern *.json --destination "$(tempContainerName)" --account-name $(tempStorageName) --account-key $accountKey

        $expireTime = $(date -u -d '30 minutes' +%Y-%m-%dT%H:%MZ)
        $connection = az storage account show-connection-string -g "$(sharedRgName)" --name "$(tempStorageName)" --query connectionString      
        $token = az storage container generate-sas --name $(tempContainerName) --expiry $expireTime --permissions r --output tsv --connection-string $connection

        Write-Host "##vso[task.setvariable variable=storageSasToken]$token"

        echo $token
        echo $storageSasToken
        echo $connection

  - task: AzureResourceManagerTemplateDeployment@3
    displayName: "Provision resources"
    inputs:
      deploymentScope: "Resource Group"
      azureResourceManagerConnection: "$(azureSubscription)"
      location: "$(rgLocation)"
      action: "Create Or Update Resource Group"
      resourceGroupName: "$(rgName)"
      deploymentMode: "Incremental"
      csmFile: "$(Pipeline.Workspace)/deploy/main.json"
      overrideParameters: |
        -buildNumber "${{parameters.buildNumber}}" 
        -storageName "$(tempStorageName)" 
        -storageContainer "$(tempContainerName)" 
        -templateSas "$(storageSasToken)" 
        -rgName "$(rgName)" 
        -rgLocation "$(rgLocation)" 
        -planName "plan-$(apiName)-$(environmentName)" 
        -planSku "$(planSku)" 
        -planCapacity "$(planCapacity)" 
        -serverName "$(serverName)"         
        -databaseName "$(databaseName)" 
        -adminUserName "$(adminUserName)" 
        -adminPassword "$(adminPassword)" 
        -allowedIpAddresses "$(allowedIpAddresses)" 
        -apiName "app-$(apiName)-$(environmentName)" 
        -aspNetCoreEnvironment "$(aspNetCoreEnvironment)" 
        -keyVaultName "kv-$(apiName)-$(environmentName)"

  - task: AzureCLI@2
    displayName: "Passing the SQL connection string"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: "pscore"
      scriptLocation: "inlineScript"
      inlineScript: |
        $dbDeployment = "$(serverName)"+"-"+"${{parameters.buildNumber}}"+"-deployment"
        $testConnectionString=$(az deployment group show -g "$(rgName)" -n "$dbDeployment" --query properties.outputs.connectionString.value)

        echo $testConnectionString

  - task: AzurePowerShell@2
    displayName: "Setup firewall rule for build agent"
    inputs:
      azureSubscription: "$(azureSubscription)"
      ScriptPath: '$(Pipeline.Workspace)/scripts/setupfirewall.ps1'
      ScriptArguments: "$(serverName)"
      azurePowerShellVersion: LatestVersion

  - task: AzurePowerShell@4
    displayName: "Using PS to get the SQL server connection string"
    inputs:
      azureSubscription: "$(azureSubscription)"
      scriptType: 'inlineScript' # Optional. Options: filePath, inline  
      azurePowerShellVersion: 'latestVersion' # Required. Options: latestVersion, otherVersion          
      inline: |        
        $psDbDeployment="$(serverName)"+"-"+"${{parameters.buildNumber}}"+"-deployment"
        $psConnectionString=(Get-AzResourceGroupDeployment -ResourceGroupName "$(rgName)" -Name "$psDbDeployment").Outputs.connectionString.value
        echo $psConnectionString          
        echo "$(Pipeline.Workspace)/DbConsoleApp/MyShop.ProductManagement.DbSetup.exe"
        $(Pipeline.Workspace)/DbConsoleApp/MyShop.ProductManagement.DbSetup.exe $psConnectionString

  - task: AzureRmWebAppDeployment@3
    displayName: 'Deploy to Staging'
    inputs:
      azureSubscription: '$(azureSubscription)'
      WebAppName: 'app-$(apiName)-$(environmentName)'
      DeployToSlotFlag: true
      ResourceGroupName: '$(rgName)'
      SlotName: staging
      Package: '$(Pipeline.Workspace)/WebApp/MyShop.ProductManagement.Api.zip'
      ScriptType: 'Inline Script'
      enableXmlVariableSubstitution: true

  - task: AzureAppServiceManage@0
    displayName: 'Start Staging Slot'
    inputs:
      azureSubscription: '$(azureSubscription)' 
      action: 'Start Azure App Service'
      webAppName: 'app-$(apiName)-$(environmentName)'
      specifySlotOrASE: true
      resourceGroupName: '$(rgName)'
      slot: staging

  - task: AzureAppServiceManage@0
    displayName: 'Swap to Production'    
    inputs:
      azureSubscription: '$(azureSubscription)'
      webAppName: 'app-$(apiName)-$(environmentName)'
      resourceGroupName: '$(rgName)'
      sourceSlot: staging

  - task: AzureAppServiceManage@0
    displayName: 'Stop Staging Slot'    
    inputs:
      azureSubscription: '$(azureSubscription)'
      action: 'Stop Azure App Service'
      webAppName: 'app-$(apiName)-$(environmentName)'
      specifySlotOrASE: true
      resourceGroupName: '$(rgName)'
      slot: staging        


        